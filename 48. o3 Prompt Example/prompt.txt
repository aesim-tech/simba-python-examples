Write a Python script that builds a 7-level, 3-phase Cascaded H-Bridge (CHB) multilevel inverter using the SIMBA Python module. Run the simulation for a few cycles, save the `.jsimba` file, and plot the 3-phase output voltages.

Requirements:

    DC-Link:
    - Voltage per source (`V_DC_module`): 100 V
    - Total DC bus (sum): 3 × 100 V = 300 V

    AC Output:
    - Line-to-line RMS voltage: 230 V
    - Frequency: 60 Hz
    - Rated power: 10 kVA (≈ 3.33 kVA per phase)
    - Rated current: `I_LL` = 10,000 VA / (√3 × 230 V) ≈ 25 A

Instructions:

    1. Refer to the provided Python script examples to understand how the SIMBA Python module works.  
    2. Consult the `simba_libraries.txt` file for information on available models, including their names, sizes, parameters, and pin configurations.  
    3. Ensure all devices are properly spaced to avoid overlap and allow room for connections. Each device can be up to 10 units in width and height. Maintain a minimum spacing of **12 units** between components. THIS IS VERY IMPORTANT.
    4. Signals (simulation results) do NOT share the same `TimePoints` vector.  
    5. It is IMPORTANT to place ALL devices before creating any connections.  
    6. If a device cannot be added due to insufficient space at the specified location, the `AddDevice(...)` method will return `None`. Always check the return value of `AddDevice()`. If it is `None`, try placing the device at a different location.  
    7. Use a "Not" model to invert command or gate signals, if needed.  
    8. For switches, it is recommended to use:  
    - "Ideal MOSFET" (vertical by default)  
    - "Ideal MOSFET with Diode" (vertical by default)  
    - "Ideal Diode" (horizontal by default)  
    9. Don’t forget to enable scopes on all devices from which you want to capture signals.  
    10. DESIGN AESTHETICS MATTER: arrange all components carefully for a clean and organized layout.  
    11. The unique ground electrical pin is called "Pin". You may use multiple grounds for clarity. Avoid creating excessively long ground connections—use multiple local grounds instead.  
    12. `IdealMosfetWithDiode` pins are labeled "Drain", "Source", and "Gate".  
    13. Before writing the code, verify the model’s logic from a power electronics/control perspective. Provide a short report explaining how this type of inverter works.  
    14. Use PWM modulation.  
    15. Do not invent or use SIMBA module methods that are not shown in the provided examples.  
    16. Here is how to check the status of a job

        ```python
        status = job.Run()
        assert str(status) == 'OK', job.Summary()
        ````


Resources: 

# /Users/manu/Source/simba-python-examples/to_llm/1. Run Simulation.py

```python
#!/usr/bin/env python3
"""
three_phase_inverter_simulation.py

This script builds a 3-phase inverter circuit in SIMBA, runs a transient simulation,
and plots the phase A output voltage and DC bus input current.
"""

from aesim.simba import Design
import matplotlib.pyplot as plt

# Create a new design
design = Design()
design.Name = "Three-phase Inverter Simulation"

# Configure transient analysis
ta = design.TransientAnalysis
ta.TimeStep = 1e-6    # 1 microsecond time step
ta.EndTime = 20e-3    # 20 ms (one cycle at 50 Hz)

circuit = design.Circuit

# Add DC voltage source for DC bus
vdc = circuit.AddDevice("DC Voltage Source", 0, 0)
vdc.Name = "Vdc"
vdc.Voltage = 400    # 400 V DC bus

# Add ground
gnd = circuit.AddDevice("Ground", 10, 0)

# Connect negative terminal of Vdc to ground
circuit.AddConnection(vdc.N, gnd.Pin)

# Define modulation parameters
fundamental_freq = 50    # 50 Hz output frequency
modulation_index = 0.8   # modulation index (0 to 1)

# Create three phase legs
for phase, offset in zip(['A', 'B', 'C'], [0, 1, 2]):
    # PWM signal generator
    pwm = circuit.AddDevice("Square Wave", 10, 10+offset * 3)
    pwm.Frequency = fundamental_freq
    pwm.Amplitude = modulation_index
    pwm.DutyCycle = 0.5

    # Upper and lower controlled switches
    sw_high = circuit.AddDevice("Controlled Switch", 20, offset * 3)
    sw_low  = circuit.AddDevice("Controlled Switch", 20, offset * 3 + 1)

    # Connect switches to DC bus and ground
    circuit.AddConnection(vdc.P, sw_high.P)
    circuit.AddConnection(vdc.N, sw_low.N)

    # Connect PWM to switches
    circuit.AddConnection(pwm.Out, sw_high.In)
    circuit.AddConnection(pwm.Out, sw_low.In)

    # Node between switches -> output phase node
    circuit.AddConnection(sw_high.N, sw_low.P)

    # Add series inductor for filtering
    L = circuit.AddDevice("Inductor", 30, offset * 3)
    L.Name = f"L_{phase}"
    circuit.AddConnection(sw_high.N, L.P)

    # Add resistive load to ground
    R = circuit.AddDevice("Resistor", 40, offset * 3)
    R.Name = f"R_{phase}"
    R.Value = 10     # 10 ohm load
    circuit.AddConnection(L.N, R.P)
    circuit.AddConnection(R.N, gnd.Pin)

# Run the simulation
job = design.TransientAnalysis.NewJob()
status = job.Run()

# Retrieve results for phase A and DC bus input current
time = job.TimePoints
voltage_A = job.GetSignalByName('R_A - Instantaneous Voltage').DataPoints
i_in = job.GetSignalByName('Vdc - Current').DataPoints

# Plot results
plt.figure()
plt.plot(time, voltage_A)
plt.xlabel('Time [s]')
plt.ylabel('Phase A Voltage [V]')
plt.title('Phase A Output Voltage')
plt.grid(True)

plt.figure()
plt.plot(time, i_in)
plt.xlabel('Time [s]')
plt.ylabel('DC Bus Input Current [A]')
plt.title('DC Bus Current')
plt.grid(True)

plt.show()
```

# /Users/manu/Source/simba-python-examples/to_llm/3. Create Circuit.py

```python
#%%  Load required module
from aesim.simba import Design
import matplotlib.pyplot as plt

# Method for printing device pin names.
# This allows the user to see how the device pins can be used in the code. 
def print_pin_names(device):
    print('\n# Pins of {0} device:'.format(device.Name))
    for index, pin in enumerate(device.Pins):
        if pin.Name in dir(device):
            print("  Pin named {0} direct access: #YourDeviceObject#.{0}".format(pin.Name))
        else:
            print("  Pin named {0} access: #YourDeviceObject#.Pins[{1:0}]".format(pin.Name, index))


#%%  Create Design
design = Design()
design.Name = "DC/DC - Buck Converter"
design.TransientAnalysis.TimeStep = 1e-6
design.TransientAnalysis.EndTime = 10e-3
circuit = design.Circuit

#%%  Add devices
V1 = circuit.AddDevice("DC Voltage Source", 2, 6)
V1.Voltage = 50
print_pin_names(V1)

SW1 =circuit.AddDevice("Controlled Switch", 8, 4)
print_pin_names(SW1)

PWM = circuit.AddDevice("Square Wave", 2, 0)
PWM.Frequency = 5000
PWM.DutyCycle = 0.5
PWM.Amplitude = 1
print_pin_names(PWM)

D1 = circuit.AddDevice("Diode", 16, 9)
D1.RotateLeft()
print_pin_names(D1)

L1 = circuit.AddDevice("Inductor", 20, 5)
L1.Value = 1E-3

C1 = circuit.AddDevice("Capacitor", 28, 9)
C1.RotateRight()
C1.Value = 100E-6

R1 = circuit.AddDevice("Resistor", 34, 9)
R1.RotateRight()
R1.Value = 5
R1.Name = "R1"
for scope in R1.Scopes:
    scope.Enabled = True
    
g = circuit.AddDevice("Ground", 3, 14) 

# Make connections
circuit.AddConnection(V1.P, SW1.P)
circuit.AddConnection(SW1.N, D1.Cathode)
circuit.AddConnection(D1.Cathode, L1.P)
circuit.AddConnection(L1.N, C1.P)
circuit.AddConnection(L1.N, R1.P)
circuit.AddConnection(PWM.Out, SW1.In)
circuit.AddConnection(V1.N, g.Pin)
circuit.AddConnection(D1.Anode, g.Pin)
circuit.AddConnection(C1.N, g.Pin)
circuit.AddConnection(R1.N, g.Pin)

#%%  Run Simulation
job = design.TransientAnalysis.NewJob()
status = job.Run()

#%% Get results
Vout = job.GetSignalByName('R1 - Instantaneous Voltage')

#%% Plot Curve
fig, ax = plt.subplots()
ax.set_title(design.Name)
ax.set_ylabel('Vout (V)')
ax.set_xlabel('time (s)')
ax.plot(Vout.TimePoints,Vout.DataPoints)
plt.show()
# %%
```

# /Users/manu/Source/simba-python-examples/to_llm/4. Open-Save Project File.py

```python
#%%  Load required module
import matplotlib.pyplot as plt
from aesim.simba import Design, ProjectRepository
import os, pathlib

#%%  Create Simple Design
design = Design()
design.Name = "DC/DC - Buck Converter"
design.TransientAnalysis.TimeStep = 1e-6
design.TransientAnalysis.EndTime = 10e-3
circuit = design.Circuit
V1 = circuit.AddDevice("DC Voltage Source", 2, 6)
V1.Voltage = 50
SW1 =circuit.AddDevice("Controlled Switch", 8, 4)
PWM = circuit.AddDevice("Square Wave", 2, 0)
PWM.Frequency = 5000
PWM.DutyCycle = 0.5
PWM.Amplitude = 1
D1 = circuit.AddDevice("Diode", 16, 9)
D1.RotateLeft()
L1 = circuit.AddDevice("Inductor", 20, 5)
L1.Value = 1E-3
C1 = circuit.AddDevice("Capacitor", 28, 9)
C1.RotateRight()
C1.Value = 100E-6
R1 = circuit.AddDevice("Resistor", 34, 9)
R1.RotateRight()
R1.Value = 5
R1.Name = "R1"
for scope in R1.Scopes:
    scope.Enabled = True
g = circuit.AddDevice("Ground", 3, 14) 
circuit.AddConnection(V1.P, SW1.P)
circuit.AddConnection(SW1.N, D1.Cathode)
circuit.AddConnection(D1.Cathode, L1.P)
circuit.AddConnection(L1.N, C1.P)
circuit.AddConnection(L1.N, R1.P)
circuit.AddConnection(PWM.Out, SW1.In)
circuit.AddConnection(V1.N, g.Pin)
circuit.AddConnection(D1.Anode, g.Pin)
circuit.AddConnection(C1.N, g.Pin)
circuit.AddConnection(R1.N, g.Pin)

#%%  Save Design in Project File
current_folder = os.path.dirname(os.path.abspath(__file__))
filepath = os.path.join(current_folder, "Buck Converter.jsimba")
if(os.path.isfile(filepath)): os.remove(filepath) # Remove file if it already exists
project = ProjectRepository(filepath) # Create project file if it doesn't exist.
project.AddDesign(design)
project.Save()

#%%  Open Design
project2 = ProjectRepository(filepath) # Open file
design = project2.GetDesignByName("DC/DC - Buck Converter")

#%%  Run Simulation
job = design.TransientAnalysis.NewJob()
status = job.Run()

#%% Get results
Vout = job.GetSignalByName('R1 - Instantaneous Voltage')

#%% Plot Curve
fig, ax = plt.subplots()
ax.set_title(design.Name)
ax.set_ylabel('Vout (V)')
ax.set_xlabel('time (s)')
ax.plot(Vout.TimePoints,Vout.DataPoints)
plt.show()

# %%
```

# /Users/manu/Source/simba-python-examples/to_llm/half_bridge.py

```python
#!/usr/bin/env python3
"""
half_bridge_converter.py

Builds and simulates a simple DC/DC half‑bridge converter in SIMBA.
All devices are placed before ANY connection is created.
Every placement is checked; if a spot is already occupied we slide the part
horizontally by 2 units until the placement succeeds, guaranteeing at least
12‑unit clearance around every device (rule #3 & #6).

Author : Emmanuel Rutovic
Date   : 2025‑05‑05
"""

from aesim.simba import Design, ProjectRepository
import os
import matplotlib.pyplot as plt

# ---------------------------------------------------------------------------
# Helper that enforces the "placement succeeds or shift" policy
# ---------------------------------------------------------------------------
def safe_add(circ, model_name, x, y, x_shift=2 , y_shift=2):
    """Try AddDevice until it returns a valid device object."""
    dev = circ.AddDevice(model_name, x, y)
    while dev is None:                         # placement collision → slide bottom-right
        x += x_shift
        y += y_shift
        dev = circ.AddDevice(model_name, x, y)
    return dev

# ---------------------------------------------------------------------------
# 1. Create design and analysis setup
# ---------------------------------------------------------------------------
design = Design()
design.Name = "DC/DC - Half-Bridge Converter"
ta = design.TransientAnalysis
ta.TimeStep = 1e-7          # 100 ns
ta.EndTime  = 100e-6        # 100 µs (≈ 10 switching periods at 100 kHz)

circuit = design.Circuit

# ---------------------------------------------------------------------------
# 2. Place ALL devices (respect ≥ 12‑unit spacing)
# ---------------------------------------------------------------------------
# Coordinates picked on a loose 20‑unit grid; safe_add will slide if needed.

# — 2.1 Sources & grounds ----------------------------------------------------
vdc   = safe_add(circuit, "DC Voltage Source", 0,   0)   # Width 4, Height 8
vdc.Voltage = 48                                          # 48 V input
for s in vdc.Scopes:                                 # enable V/I scopes for post‑proc
    s.Enabled = True

gnd_1 = safe_add(circuit, "Ground",          0,  10)      # local input ground

# — 2.2 PWM generator & inverter --------------------------------------------
pwm   = safe_add(circuit, "Square Wave",     0,  30)
pwm.Frequency  = 100e3                                   # 100 kHz switching
pwm.DutyCycle  = 0.5                                     # 50 % duty
pwm.Amplitude  = 1

invert = safe_add(circuit, "Not",           10,  30)

# — 2.3 Power switches (vertical MOSFETs with body diode) --------------------
q_high = safe_add(circuit, "Ideal MOSFET with Diode", 20,   0)   # Q_H
q_low  = safe_add(circuit, "Ideal MOSFET with Diode", 20,  18)   # Q_L (≥12 units below)

# — 2.4 Output filter & load -------------------------------------------------
ind   = safe_add(circuit, "Inductor",        20,   4)
ind.Value = 10e-6                            # 10 µH

cap   = safe_add(circuit, "Capacitor",       30,   4)
cap.Value = 220e-6                           # 220 µF
cap.RotateRight()                            # horizontal pins

res   = safe_add(circuit, "Resistor",        40,  4)
res.Value = 4                                # 4 Ω load
res.RotateRight()
res.Name = "R_load"
for s in res.Scopes:                         # enable V/I scopes for post‑proc
    s.Enabled = True

gnd_2 = safe_add(circuit, "Ground",         35,  12)      # local output ground

# ---------------------------------------------------------------------------
# 3. Create ALL connections (after every device is placed)
# ---------------------------------------------------------------------------

# — 3.1 Input side -----------------------------------------------------------
circuit.AddConnection(vdc.P, q_high.Drain)         # Vdc+ → high‑side drain
circuit.AddConnection(vdc.N, gnd_1.Pin)            # Vdc‑ → ground

# — 3.2 Half‑bridge node -----------------------------------------------------
circuit.AddConnection(q_high.Source, q_low.Drain)  # common mid‑point
circuit.AddConnection(q_low.Source, gnd_1.Pin)     # low‑side source to ground

# — 3.3 Gate drives ----------------------------------------------------------
circuit.AddConnection(pwm.Out,     q_high.Gate)    # PWM → Q_H gate
circuit.AddConnection(pwm.Out,     invert.In)      # PWM → Not
circuit.AddConnection(invert.Out,  q_low.Gate)     # Not → Q_L gate

# — 3.4 Output filter / load -------------------------------------------------
circuit.AddConnection(q_high.Source, ind.P)        # mid‑point → inductor
circuit.AddConnection(ind.N, cap.P)                # L → C (+)
circuit.AddConnection(ind.N, res.P)                # L → load
circuit.AddConnection(cap.N, gnd_2.Pin)            # C (−) → output gnd
circuit.AddConnection(res.N, gnd_2.Pin)            # load (−) → output gnd

# ---------------------------------------------------------------------------
# 4. Run transient simulation
# ---------------------------------------------------------------------------
job    = ta.NewJob()
status = job.Run()
assert str(status) == 'OK', job.Summary()

# ---------------------------------------------------------------------------
# 5. Post‑processing (note: each signal owns its own TimePoints vector)
# ---------------------------------------------------------------------------
for s in job.Signals:
    print(f"{s.Name}")
v_out = job.GetSignalByName("R_load - Instantaneous Voltage")
i_in  = job.GetSignalByName("DC1 - Current")

plt.figure()
plt.plot(v_out.TimePoints, v_out.DataPoints)
plt.xlabel("Time [s]")
plt.ylabel("Vout [V]")
plt.title("Half‑Bridge Output Voltage (after LC filter)")
plt.grid(True)

plt.figure()
plt.plot(i_in.TimePoints, i_in.DataPoints)
plt.xlabel("Time [s]")
plt.ylabel("Input Current [A]")
plt.title("DC Bus Input Current")
plt.grid(True)

plt.show()

# ---------------------------------------------------------------------------
# 6. Save project
# ---------------------------------------------------------------------------
filepath = os.path.join(os.getcwd(), "HB.jsimba")
if os.path.isfile(filepath):
    os.remove(filepath)
proj = ProjectRepository(filepath)
proj.AddDesign(design)
proj.Save()
print(f"Design saved to: {filepath}")
```

# /Users/manu/Source/simba-python-examples/to_llm/simba_libraries.txt

```plaintext
Model Name: "Controlled Switch"
Library: Electrical\Switches
Dimensions: [6;4]
Pins:
- "P" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [6;2], Direction: East)
- "In" (Type: ControlIn, Location: [3;0], Direction: North)
---

Model Name: "Controlled Switch with Threshold"
Library: Electrical\Switches
Dimensions: [6;4]
Pins:
- "P" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [6;2], Direction: East)
- "In" (Type: ControlIn, Location: [3;0], Direction: North)
Parameters:
- "OnValue"
- "OffValue"
- "Ron"
---

Model Name: "Switch"
Library: Electrical\Switches
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "State"
- "T1"
---

Model Name: "AC Current Source (Sinus)"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "Frequency"
- "Amplitude"
- "Phase"
---

Model Name: "AC Voltage Source (Sinus)"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "Frequency"
- "Amplitude"
- "Phase"
---

Model Name: "Controlled Current Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "In" (Type: ControlIn, Location: [0;4], Direction: West)
---

Model Name: "Controlled Voltage Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "In" (Type: ControlIn, Location: [0;4], Direction: West)
---

Model Name: "Controlled Voltage Source (small)"
Library: Electrical\Sources
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [4;1], Direction: East)
- "In" (Type: ControlIn, Location: [0;1], Direction: West)
---

Model Name: "Current Controlled Current Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "M" (Type: Electrical, Location: [2;0], Direction: North)
- "K" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "L" (Type: Electrical, Location: [0;6], Direction: West)
Parameters:
- "Gain"
---

Model Name: "Current Controlled Voltage Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "M" (Type: Electrical, Location: [2;0], Direction: North)
- "K" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "L" (Type: Electrical, Location: [0;6], Direction: West)
Parameters:
- "Gain"
---

Model Name: "DC Current Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "Current"
---

Model Name: "DC Voltage Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "Voltage"
---

Model Name: "Ground"
Library: Electrical\Sources
Dimensions: [2;2]
Pins:
- "G" (Type: Electrical, Location: [1;0], Direction: North)
---

Model Name: "Nonlinear Current Source (Generic)"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "V1" (Type: Electrical, Location: [0;4], Direction: West)
- "I1p" (Type: Electrical, Location: [4;2], Direction: East)
- "I1n" (Type: Electrical, Location: [4;6], Direction: East)
Parameters:
- "Expression"
- "NumberOfVoltageVariables"
- "NumberOfCurrentVariables"
---

Model Name: "Nonlinear Voltage Source (Generic)"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "V1" (Type: Electrical, Location: [0;4], Direction: West)
- "I1p" (Type: Electrical, Location: [4;2], Direction: East)
- "I1n" (Type: Electrical, Location: [4;6], Direction: East)
Parameters:
- "Expression"
- "NumberOfVoltageVariables"
- "NumberOfCurrentVariables"
---

Model Name: "Nonlinear Voltage Source (Product)"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "M" (Type: Electrical, Location: [2;0], Direction: North)
- "K" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "L" (Type: Electrical, Location: [0;6], Direction: West)
- "O" (Type: Electrical, Location: [4;2], Direction: East)
- "P" (Type: Electrical, Location: [4;6], Direction: East)
Parameters:
- "Gain"
---

Model Name: "Piecewise Linear Current Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "TimeValueMatrix"
---

Model Name: "Piecewise Linear Voltage Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "TimeValueMatrix"
---

Model Name: "Current Pulse Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "InitialValue"
- "PulsedValue"
- "Delay"
- "RiseTime"
- "FallTime"
- "OnTime"
- "Period"
- "NbOfCycles"
---

Model Name: "Voltage Pulse Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "InitialValue"
- "PulsedValue"
- "Delay"
- "RiseTime"
- "FallTime"
- "OnTime"
- "Period"
- "NbOfCycles"
---

Model Name: "Current Step Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "InitialValue"
- "FinalValue"
- "StepTime"
---

Model Name: "Voltage Step Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
Parameters:
- "InitialValue"
- "FinalValue"
- "StepTime"
---

Model Name: "Voltage Controlled Voltage Source (Variable Gain)"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "M" (Type: Electrical, Location: [2;0], Direction: North)
- "K" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "L" (Type: Electrical, Location: [0;6], Direction: West)
- "In" (Type: ControlIn, Location: [4;4], Direction: East)
---

Model Name: "Voltage Controlled Current Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "M" (Type: Electrical, Location: [2;0], Direction: North)
- "K" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "L" (Type: Electrical, Location: [0;6], Direction: West)
Parameters:
- "Gain"
---

Model Name: "Voltage Controlled Voltage Source"
Library: Electrical\Sources
Dimensions: [4;8]
Pins:
- "M" (Type: Electrical, Location: [2;0], Direction: North)
- "K" (Type: Electrical, Location: [0;2], Direction: West)
- "N" (Type: Electrical, Location: [2;8], Direction: South)
- "L" (Type: Electrical, Location: [0;6], Direction: West)
Parameters:
- "Gain"
---

Model Name: "Detailed Diode"
Library: Electrical\Semiconductors
Dimensions: [6;2]
Pins:
- "Anode" (Type: Electrical, Location: [0;1], Direction: West)
- "Cathode" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "Vf_If_Matrix"
- "C_Vr_Matrix"
- "Vinit"
---

Model Name: "Detailed MOSFET (Datasheet)"
Library: Electrical\Semiconductors
Dimensions: [4;6]
Pins:
- "Drain" (Type: Electrical, Location: [2;0], Direction: North)
- "Source" (Type: Electrical, Location: [2;6], Direction: South)
- "Gate" (Type: Electrical, Location: [0;3], Direction: West)
Parameters:
- "Rg"
- "VgsIdMatrix"
- "VgsIdMatrix_Vds"
- "VdsIdMatrix"
- "VdsIdMatrix_Vgs"
- "Ciss"
- "Coss"
- "Crss"
- "VgsInit"
- "VdsInit"
- "Vsd_Is_BodyDiodeMatrix"
---

Model Name: "Detailed MOSFET (SPICE VDMOS)"
Library: Electrical\Semiconductors
Dimensions: [4;6]
Pins:
- "Drain" (Type: Electrical, Location: [2;0], Direction: North)
- "Source" (Type: Electrical, Location: [2;6], Direction: South)
- "Gate" (Type: Electrical, Location: [0;3], Direction: West)
Parameters:
- "Spice_Netlist"
- "VgsInit"
- "VdsInit"
---

Model Name: "Ideal Diode"
Library: Electrical\Semiconductors
Dimensions: [6;2]
Pins:
- "Anode" (Type: Electrical, Location: [0;1], Direction: West)
- "Cathode" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "Rd"
- "Vf"
- "InitialTemperature"
- "ShowJunctionTemperatureControlPin"
- "LossCalculationFrequency"
---

Model Name: "Ideal IGBT"
Library: Electrical\Semiconductors
Dimensions: [4;6]
Pins:
- "Collector" (Type: Electrical, Location: [2;0], Direction: North)
- "Emitter" (Type: Electrical, Location: [2;6], Direction: South)
- "Gate" (Type: ControlIn, Location: [0;3], Direction: West)
Parameters:
- "Ron"
- "Vf"
- "InitialTemperature"
- "ShowJunctionTemperatureControlPin"
- "LossCalculationFrequency"
---

Model Name: "Ideal MOSFET"
Library: Electrical\Semiconductors
Dimensions: [4;6]
Pins:
- "P" (Type: Electrical, Location: [2;0], Direction: North)
- "N" (Type: Electrical, Location: [2;6], Direction: South)
- "In" (Type: ControlIn, Location: [0;3], Direction: West)
Parameters:
- "Ron"
- "InitialTemperature"
- "ShowJunctionTemperatureControlPin"
- "LossCalculationFrequency"
---

Model Name: "Ideal MOSFET with Diode"
Library: Electrical\Semiconductors
Dimensions: [4;6]
Pins:
- "Drain" (Type: Electrical, Location: [2;0], Direction: North)
- "Source" (Type: Electrical, Location: [2;6], Direction: South)
- "Gate" (Type: ControlIn, Location: [0;3], Direction: West)
Parameters:
- "Ron"
- "Rdon"
- "Vdf"
- "InitialTemperature"
- "ShowJunctionTemperatureControlPin"
- "LossCalculationFrequency"
---

Model Name: "Ideal Thyristor"
Library: Electrical\Semiconductors
Dimensions: [6;2]
Pins:
- "Anode" (Type: Electrical, Location: [0;1], Direction: West)
- "Cathode" (Type: Electrical, Location: [6;1], Direction: East)
- "In" (Type: ControlIn, Location: [5;0], Direction: North)
---

Model Name: "Current Meter"
Library: Electrical\Probes
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [4;1], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "Current Probe"
Library: Electrical\Probes
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [4;1], Direction: East)
- "Out" (Type: ControlOut, Location: [2;2], Direction: South)
Parameters:
- "Gain"
- "SamplingTime"
---

Model Name: "Differential Voltage Meter"
Library: Electrical\Probes
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [4;1], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "Differential Voltage Probe"
Library: Electrical\Probes
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [4;1], Direction: East)
- "Out" (Type: ControlOut, Location: [2;2], Direction: South)
Parameters:
- "Gain"
- "SamplingTime"
---

Model Name: "Power Probe"
Library: Electrical\Probes
Dimensions: [5;4]
Pins:
- "L1" (Type: Electrical, Location: [0;1], Direction: West)
- "L2" (Type: Electrical, Location: [0;3], Direction: West)
- "R1" (Type: Electrical, Location: [5;1], Direction: East)
- "R2" (Type: Electrical, Location: [5;3], Direction: East)
- "P" (Type: ControlOut, Location: [1;4], Direction: South)
- "Q" (Type: ControlOut, Location: [2;4], Direction: South)
- "S" (Type: ControlOut, Location: [3;4], Direction: South)
- "PF" (Type: ControlOut, Location: [4;4], Direction: South)
Parameters:
- "Frequency"
- "SamplingTime"
---

Model Name: "Power Probe (3 Phases)"
Library: Electrical\Probes
Dimensions: [8;8]
Pins:
- "L_A" (Type: Electrical, Location: [0;2], Direction: West)
- "L_B" (Type: Electrical, Location: [0;4], Direction: West)
- "L_C" (Type: Electrical, Location: [0;6], Direction: West)
- "R_A" (Type: Electrical, Location: [8;2], Direction: East)
- "R_B" (Type: Electrical, Location: [8;4], Direction: East)
- "R_C" (Type: Electrical, Location: [8;6], Direction: East)
- "P" (Type: ControlOut, Location: [2;8], Direction: South)
- "Q" (Type: ControlOut, Location: [4;8], Direction: South)
- "S" (Type: ControlOut, Location: [6;8], Direction: South)
Parameters:
- "Frequency"
- "SamplingTime"
---

Model Name: "Voltage Meter"
Library: Electrical\Probes
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
Parameters:
- "SamplingTime"
---

Model Name: "Voltage Probe"
Library: Electrical\Probes
Dimensions: [4;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "Out" (Type: ControlOut, Location: [4;1], Direction: East)
Parameters:
- "Gain"
- "SamplingTime"
---

Model Name: "Capacitor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "Value"
- "Vinit"
---

Model Name: "Common-Mode Choke"
Library: Electrical\RLC
Dimensions: [6;4]
Pins:
- "W1P" (Type: Electrical, Location: [0;1], Direction: West)
- "W1N" (Type: Electrical, Location: [6;1], Direction: East)
- "W2P" (Type: Electrical, Location: [0;3], Direction: West)
- "W2N" (Type: Electrical, Location: [6;3], Direction: East)
Parameters:
- "CommonModeInductance"
- "LeakageInductance"
- "WindingResistance"
---

Model Name: "Controlled Capacitor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
- "In" (Type: ControlIn, Location: [3;0], Direction: North)
Parameters:
- "Vinit"
---

Model Name: "Controlled Resistor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
- "In" (Type: ControlIn, Location: [3;0], Direction: North)
---

Model Name: "Inductor (Coupled)"
Library: Electrical\RLC
Dimensions: [6;6]
Pins:
- "W1P" (Type: Electrical, Location: [0;1], Direction: West)
- "W1N" (Type: Electrical, Location: [6;1], Direction: East)
- "W2P" (Type: Electrical, Location: [0;3], Direction: West)
- "W2N" (Type: Electrical, Location: [6;3], Direction: East)
- "W3P" (Type: Electrical, Location: [0;5], Direction: West)
- "W3N" (Type: Electrical, Location: [6;5], Direction: East)
Parameters:
- "NumberOfWindings"
- "Inductance"
- "Iinit"
---

Model Name: "Inductor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "Value"
- "Iinit"
---

Model Name: "Piecewise Linear Resistor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "VoltageCurrentMatrix"
---

Model Name: "Resistor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "Value"
---

Model Name: "Resistor (Thermal Losses)"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
- "resistor_losses_source" (Type: Thermal, Location: [3;0], Direction: North)
Parameters:
- "Value"
- "LossCalculationFrequency"
---

Model Name: "Saturable Capacitor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "ApparentCapacitance"
- "Vinit"
---

Model Name: "Saturable Inductor"
Library: Electrical\RLC
Dimensions: [6;2]
Pins:
- "P" (Type: Electrical, Location: [0;1], Direction: West)
- "N" (Type: Electrical, Location: [6;1], Direction: East)
Parameters:
- "ApparentInductance"
- "Iinit"
---

Model Name: "AC Sweep Perturbation"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "Constant"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "Value"
- "SamplingTime"
---

Model Name: "Controlled PWM Generator"
Library: Control\Sources
Dimensions: [8;6]
Pins:
- "Frequency" (Type: ControlIn, Location: [0;1], Direction: West)
- "DutyCycle" (Type: ControlIn, Location: [0;3], Direction: West)
- "PhaseShift" (Type: ControlIn, Location: [0;5], Direction: West)
- "Out" (Type: ControlOut, Location: [8;3], Direction: East)
Parameters:
- "RiseTime"
- "FallTime"
- "MinimalFrequency"
- "SamplingTime"
---

Model Name: "Controlled Sawtooth Wave Generator"
Library: Control\Sources
Dimensions: [8;6]
Pins:
- "Frequency" (Type: ControlIn, Location: [0;2], Direction: West)
- "PhaseShift" (Type: ControlIn, Location: [0;4], Direction: West)
- "Out" (Type: ControlOut, Location: [8;3], Direction: East)
Parameters:
- "MinimalFrequency"
- "SamplingTime"
---

Model Name: "Controlled Triangular Wave Generator"
Library: Control\Sources
Dimensions: [8;6]
Pins:
- "Frequency" (Type: ControlIn, Location: [0;3], Direction: West)
- "Out" (Type: ControlOut, Location: [8;3], Direction: East)
Parameters:
- "MinimalFrequency"
- "DutyCycle"
- "SamplingTime"
---

Model Name: "Piecewise Linear"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "TimeValueMatrix"
- "SamplingTime"
---

Model Name: "Sawtooth Wave"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "Amplitude"
- "Frequency"
- "Offset"
- "PhaseShift"
- "SamplingTime"
---

Model Name: "Sinusoidal Wave"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "Amplitude"
- "Frequency"
- "Offset"
- "PhaseShift"
- "SamplingTime"
---

Model Name: "Square Wave"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "Amplitude"
- "Frequency"
- "DutyCycle"
- "Offset"
- "PhaseShift"
- "SamplingTime"
---

Model Name: "Step"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "InitialValue"
- "FinalValue"
- "StepTime"
- "SamplingTime"
---

Model Name: "Triangular Wave"
Library: Control\Sources
Dimensions: [4;4]
Pins:
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "Amplitude"
- "Frequency"
- "DutyCycle"
- "Offset"
- "PhaseShift"
- "SamplingTime"
---

Model Name: "Monostable"
Library: Control\Logic
Dimensions: [4;6]
Pins:
- "Rising" (Type: ControlIn, Location: [0;2], Direction: West)
- "Falling" (Type: ControlIn, Location: [0;4], Direction: West)
- "PulseWidth" (Type: ControlIn, Location: [2;6], Direction: South)
- "Q" (Type: ControlOut, Location: [4;2], Direction: East)
- "notQ" (Type: ControlOut, Location: [4;4], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "AND"
Library: Control\Logic
Dimensions: [4;4]
Pins:
- "In1" (Type: ControlIn, Location: [0;1], Direction: West)
- "In2" (Type: ControlIn, Location: [0;3], Direction: West)
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "J-K Flip-Flop"
Library: Control\Logic
Dimensions: [4;6]
Pins:
- "J" (Type: ControlIn, Location: [0;2], Direction: West)
- "K" (Type: ControlIn, Location: [0;4], Direction: West)
- "clock" (Type: ControlIn, Location: [0;3], Direction: West)
- "Q" (Type: ControlOut, Location: [4;2], Direction: East)
- "notQ" (Type: ControlOut, Location: [4;4], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "Not"
Library: Control\Logic
Dimensions: [4;4]
Pins:
- "In" (Type: ControlIn, Location: [0;2], Direction: West)
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "OR"
Library: Control\Logic
Dimensions: [4;4]
Pins:
- "In1" (Type: ControlIn, Location: [0;1], Direction: West)
- "In2" (Type: ControlIn, Location: [0;3], Direction: West)
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "Signal Selector"
Library: Control\Logic
Dimensions: [8;4]
Pins:
- "i1" (Type: ControlIn, Location: [0;1], Direction: West)
- "i2" (Type: ControlIn, Location: [0;3], Direction: West)
- "Selector" (Type: ControlIn, Location: [4;4], Direction: South)
- "Out" (Type: ControlOut, Location: [8;2], Direction: East)
Parameters:
- "NumberOfInputs"
- "SamplingTime"
---

Model Name: "Set-Reset Flip-Flop"
Library: Control\Logic
Dimensions: [4;6]
Pins:
- "S" (Type: ControlIn, Location: [0;2], Direction: West)
- "R" (Type: ControlIn, Location: [0;4], Direction: West)
- "Q" (Type: ControlOut, Location: [4;2], Direction: East)
- "notQ" (Type: ControlOut, Location: [4;4], Direction: East)
Parameters:
- "SamplingTime"
---

Model Name: "XOR"
Library: Control\Logic
Dimensions: [4;4]
Pins:
- "In1" (Type: ControlIn, Location: [0;1], Direction: West)
- "In2" (Type: ControlIn, Location: [0;3], Direction: West)
- "Out" (Type: ControlOut, Location: [4;2], Direction: East)
Parameters:
- "SamplingTime"
---
```

